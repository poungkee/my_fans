# ========================================
# CI/CD for Frontend
# ========================================

name: Deploy Frontend

on:
  push:
    branches: [main]
    paths:
      - 'frontend/**'
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  EKS_CLUSTER: dw-fans-prod-eks
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com

jobs:
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image
        env:
          ECR_REPOSITORY: fans-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # 멀티 스테이지 빌드 (최적화)
          docker build \
            --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg REACT_APP_API_URL=https://api.fans.ai.kr \
            --build-arg REACT_APP_AI_SERVICE_URL=https://ai.fans.ai.kr \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -f frontend/Dockerfile \
            frontend

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          kubectl set image deployment/frontend \
            frontend=$ECR_REGISTRY/fans-frontend:$IMAGE_TAG \
            -n fans

          kubectl rollout status deployment/frontend -n fans --timeout=5m

      - name: Verify deployment
        run: |
          kubectl get pods -n fans -l app=frontend
          echo "Frontend deployed: https://fans.ai.kr"

      - name: Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Frontend 배포 ${{ job.status }}
            URL: https://fans.ai.kr
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
