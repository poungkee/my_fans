# ========================================
# CI/CD for Backend Services
# GitHub Actions (무료 2000분/월)
# ========================================

name: Deploy Backend

on:
  push:
    branches: [main]
    paths:
      - 'backend/api/**'
      - 'backend/crawler/**'
      - 'backend/scheduler/**'
      - 'backend/simple-classifier/**'
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  EKS_CLUSTER: dw-fans-prod-eks
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com

jobs:
  # ========================================
  # Main API Build & Deploy
  # ========================================
  deploy-main-api:
    name: Deploy Main API
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'backend/api')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REPOSITORY: fans-main-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Docker 빌드 (멀티 스테이지로 최적화)
          docker build \
            --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -f backend/api/Dockerfile \
            backend/api

          # ECR에 푸시
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          kubectl set image deployment/main-api \
            main-api=$ECR_REGISTRY/fans-main-api:$IMAGE_TAG \
            -n fans

          # 롤아웃 상태 확인
          kubectl rollout status deployment/main-api -n fans --timeout=5m

      - name: Verify deployment
        run: |
          kubectl get pods -n fans -l app=main-api
          kubectl get svc main-api -n fans

      - name: Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Main API 배포 ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ========================================
  # API Crawler Build & Deploy
  # ========================================
  deploy-crawler:
    name: Deploy API Crawler
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'backend/crawler')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push
        env:
          ECR_REPOSITORY: fans-api-crawler
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -f backend/crawler/api-crawler/Dockerfile \
            backend/crawler

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to EKS
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

          kubectl set image deployment/api-crawler \
            api-crawler=$ECR_REGISTRY/fans-api-crawler:$IMAGE_TAG \
            -n fans

          kubectl rollout status deployment/api-crawler -n fans --timeout=5m

  # ========================================
  # Scheduler Build & Deploy
  # ========================================
  deploy-scheduler:
    name: Deploy Scheduler
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'backend/scheduler')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push
        env:
          ECR_REPOSITORY: fans-scheduler
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -f backend/scheduler/Dockerfile \
            backend/scheduler

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to EKS
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

          kubectl set image deployment/scheduler \
            scheduler=$ECR_REGISTRY/fans-scheduler:$IMAGE_TAG \
            -n fans

          kubectl rollout status deployment/scheduler -n fans --timeout=5m

  # ========================================
  # Classification API Build & Deploy
  # ========================================
  deploy-classification:
    name: Deploy Classification API
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'backend/simple-classifier')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push
        env:
          ECR_REPOSITORY: fans-classification-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -f backend/simple-classifier/Dockerfile \
            backend/simple-classifier

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to EKS
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

          kubectl set image deployment/classification-api \
            classification-api=$ECR_REGISTRY/fans-classification-api:$IMAGE_TAG \
            -n fans

          kubectl rollout status deployment/classification-api -n fans --timeout=5m
