services:
  # ================================
  # 데이터베이스
  # ================================

  # PostgreSQL Database Server (Port: 5432)
  postgres:
    image: postgres:15
    container_name: fans_postgres
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fans_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fans_user} -d ${POSTGRES_DB:-fans_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ================================
  # AI 서비스들
  # ================================

  # AI Summarization Service (Port: 8000)
  summarize-ai:
    build: ./backend/ai/summarize-ai
    container_name: fans_summarize_ai
    ports:
      - "${SUMMARIZE_AI_PORT:-8000}:8000"
    env_file:
      - .env
    environment:
      - PORT=${SUMMARIZE_AI_PORT:-8000}
      - MODEL_NAME=${MODEL_NAME}
      - MAX_SUMMARY_LENGTH=${MAX_SUMMARY_LENGTH}
    networks:
      - fans_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # ================================
  # 편향 분석 AI 서비스
  # ================================

  # AI Bias Analysis Service (Port: 8002)
  bias-analysis-ai:
    build: ./backend/ai/bias-analysis-ai
    container_name: fans_bias_analysis_ai
    ports:
      - "${BIAS_ANALYSIS_AI_PORT:-8002}:8002"
    env_file:
      - .env
    environment:
      - PORT=${BIAS_ANALYSIS_AI_PORT:-8002}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fans_network
    volumes:
      - ./backend/ai/bias-analysis-ai:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # ================================
  # 크롤러 서비스들
  # ================================

  # API Crawler Service (Port: 4003)
  api-crawler:
    build:
      context: ./backend/crawler
      dockerfile: ./api-crawler/Dockerfile
    container_name: fans_api_crawler
    ports:
      - "${API_CRAWLER_PORT:-4003}:4003"
    env_file:
      - .env
    environment:
      - API_CRAWLER_PORT=${API_CRAWLER_PORT:-4003}
      - AUTO_CRAWL=${AUTO_CRAWL:-true}
      - CRAWL_INTERVAL_MINUTES=${CRAWL_INTERVAL_MINUTES:-5}
      - CRAWL_LIMIT_PER_CATEGORY=${CRAWL_LIMIT_PER_CATEGORY:-5}
      - NAVER_SEARCH_CLIENT_ID=${NAVER_SEARCH_CLIENT_ID}
      - NAVER_SEARCH_CLIENT_SECRET=${NAVER_SEARCH_CLIENT_SECRET}
      - NAVER_CLIENT_ID_2=${NAVER_CLIENT_ID_2}
      - NAVER_CLIENT_SECRET_2=${NAVER_CLIENT_SECRET_2}
    depends_on:
      postgres:
        condition: service_healthy
      bias-analysis-ai:
        condition: service_healthy
    networks:
      - fans_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4003/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    # volumes:
    #   - ./backend/crawler/api-crawler/src:/app/src
    #   - ./backend/crawler/api-crawler/package.json:/app/package.json
    #   - ./backend/crawler/api-crawler/package-lock.json:/app/package-lock.json
    #   - ./backend/crawler/api-crawler/tsconfig.json:/app/tsconfig.json
    #   - /app/node_modules
    #   - /app/dist
    restart: unless-stopped

  # ================================
  # Puppeteer Crawler - 방법 1: 환경변수 기반 (완벽한 시간차 분산)
  # ================================
  # 현재 사용 안함 - 네이버 API 크롤러만 사용

  # puppeteer-crawler-1:
  #   build:
  #     context: ./backend/crawler
  #     dockerfile: ./puppeteer-crawler/Dockerfile
  #   container_name: fans_puppeteer_crawler_1
  #   ports:
  #     - "4004:4004"
  #   env_file:
  #     - .env
  #   environment:
  #     - PUPPETEER_CRAWLER_PORT=${PUPPETEER_CRAWLER_PORT:-4004}
  #     - AUTO_CRAWL=${AUTO_CRAWL:-true}
  #     - CRAWL_INTERVAL=${CRAWL_INTERVAL:-180000}
  #     - TOTAL_REPLICAS=${TOTAL_REPLICAS:-3}
  #     - REPLICA_INDEX=0
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - fans_network
  #   shm_size: '2gb'
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1.0'
  #         memory: 1G
  #       reservations:
  #         cpus: '0.5'
  #         memory: 512M
  #   restart: unless-stopped

  # puppeteer-crawler-2:
  #   build:
  #     context: ./backend/crawler
  #     dockerfile: ./puppeteer-crawler/Dockerfile
  #   container_name: fans_puppeteer_crawler_2
  #   ports:
  #     - "4005:4004"
  #   env_file:
  #     - .env
  #   environment:
  #     - PUPPETEER_CRAWLER_PORT=${PUPPETEER_CRAWLER_PORT:-4004}
  #     - AUTO_CRAWL=${AUTO_CRAWL:-true}
  #     - CRAWL_INTERVAL=${CRAWL_INTERVAL:-180000}
  #     - TOTAL_REPLICAS=${TOTAL_REPLICAS:-3}
  #     - REPLICA_INDEX=1
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - fans_network
  #   shm_size: '2gb'
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1.0'
  #         memory: 1G
  #       reservations:
  #         cpus: '0.5'
  #         memory: 512M
  #   restart: unless-stopped

  # puppeteer-crawler-3:
  #   build:
  #     context: ./backend/crawler
  #     dockerfile: ./puppeteer-crawler/Dockerfile
  #   container_name: fans_puppeteer_crawler_3
  #   ports:
  #     - "4006:4004"
  #   env_file:
  #     - .env
  #   environment:
  #     - PUPPETEER_CRAWLER_PORT=${PUPPETEER_CRAWLER_PORT:-4004}
  #     - AUTO_CRAWL=${AUTO_CRAWL:-true}
  #     - CRAWL_INTERVAL=${CRAWL_INTERVAL:-180000}
  #     - TOTAL_REPLICAS=${TOTAL_REPLICAS:-3}
  #     - REPLICA_INDEX=2
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - fans_network
  #   shm_size: '2gb'
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1.0'
  #         memory: 1G
  #       reservations:
  #         cpus: '0.5'
  #         memory: 512M
  #   restart: unless-stopped

  # ================================
  # Puppeteer Crawler - 방법 2: 랜덤 지연 (자동 확장)
  # 사용법: docker-compose up -d --scale puppeteer-crawler-random=N
  # ================================

  # puppeteer-crawler-random:
  #   build:
  #     context: ./backend/crawler
  #     dockerfile: ./puppeteer-crawler/Dockerfile
  #   ports:
  #     - "4004-4010:4004"
  #   env_file:
  #     - .env
  #   environment:
  #     - PUPPETEER_CRAWLER_PORT=4004
  #     - AUTO_CRAWL=true
  #     - CRAWL_INTERVAL=180000
  #     - TOTAL_REPLICAS=3
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - fans_network
  #   shm_size: '2gb'
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1.0'
  #         memory: 1G
  #       reservations:
  #         cpus: '0.5'
  #         memory: 512M
  #   restart: unless-stopped

  # ================================
  # 메인 API 서비스
  # ================================

  # Main Backend API (Port: 3000)
  main-api:
    build: ./backend/api
    container_name: fans_main_api
    ports:
      - "${PORT:-3000}:3000"
    env_file:
      - .env
    environment:
      - PORT=${PORT:-3000}
      - NODE_ENV=${NODE_ENV:-development}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      summarize-ai:
        condition: service_healthy
      api-crawler:
        condition: service_started
    networks:
      - fans_network
    volumes:
      - ./backend/api:/app
      - /app/node_modules
      - ./backend/api/uploads:/app/uploads
    restart: unless-stopped

  # ================================
  # 프론트엔드
  # ================================

  # React Frontend (Port: 3001)
  frontend:
    build: ./frontend
    container_name: fans_frontend
    ports:
      - "3001:3001"
    env_file:
      - .env
    environment:
      # 도커 환경: 컨테이너 이름 사용 (setupProxy.js가 프록시 처리)
      - REACT_APP_API_BASE=
      - REACT_APP_API_URL=http://main-api:3000
      - REACT_APP_AI_SERVICE_URL=http://summarize-ai:8000
      - PORT=3001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - fans_network
    depends_on:
      - main-api
    restart: unless-stopped

  # ================================
  # 새로운 서비스들 (Spark, Kafka, Airflow 대체)
  # ================================

  # Simple Classification API (Spark 대체)
  classification-api:
    build: ./backend/simple-classifier
    container_name: fans_classification_api
    ports:
      - "5000:5000"
    env_file:
      - .env
    environment:
      - CLASSIFICATION_API_PORT=5000
      - DB_HOST=postgres
      - DB_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fans_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    restart: unless-stopped

  # News Processing Scheduler (Airflow 대체)
  scheduler:
    build: ./backend/scheduler
    container_name: fans_scheduler
    env_file:
      - .env
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - CLASSIFICATION_API_URL=http://classification-api:5000
      - SUMMARIZE_AI_URL=http://summarize-ai:8000
      - SCHEDULE_INTERVAL=*/10 * * * *
      - RUN_ON_START=false
      - RAW_NEWS_BATCH_SIZE=100
      - SUMMARY_BATCH_SIZE=50
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      classification-api:
        condition: service_healthy
      summarize-ai:
        condition: service_healthy
    networks:
      - fans_network
    restart: unless-stopped

  # ================================
  # 아래 서비스들은 더 이상 사용하지 않음 (주석 처리)
  # ================================

  # # Zookeeper (Kafka dependency) - 사용 안함
  # # zookeeper:
  # #   image: confluentinc/cp-zookeeper:7.5.0
  # #   container_name: fans_zookeeper
  # #   environment:
  # #     ZOOKEEPER_CLIENT_PORT: 2181
  # #     ZOOKEEPER_TICK_TIME: 2000
  # #   networks:
  # #     - fans_network
  # #   restart: unless-stopped

  # # Kafka Broker (Port: 9092) - 사용 안함
  # # kafka:
  # #   image: confluentinc/cp-kafka:7.5.0
  # #   container_name: fans_kafka
  # #   depends_on:
  # #     - zookeeper
  # #   ports:
  # #     - "9092:9092"
  # #   environment:
  # #     KAFKA_BROKER_ID: 1
  # #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  # #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
  # #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  # #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  # #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  # #   networks:
  # #     - fans_network
  # #   restart: unless-stopped

  # # Spark Master (Port: 7077, UI: 8080) - 사용 안함
  # # spark-master:
  # #   image: apache/spark:3.5.0
  # #   container_name: fans_spark_master
  # #   environment:
  # #     - SPARK_MODE=master
  # #     - SPARK_MASTER_HOST=spark-master
  # #     - SPARK_MASTER_PORT=7077
  # #     - SPARK_MASTER_WEBUI_PORT=8080
  # #   ports:
  # #     - "7077:7077"
  # #     - "8080:8080"
  # #   networks:
  # #     - fans_network
  # #   volumes:
  # #     - ./backend/recommendation:/app
  # #   command: /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master
  # #   restart: unless-stopped

  # # Spark Worker - 사용 안함
  # # spark-worker:
  # #   image: apache/spark:3.5.0
  # #   container_name: fans_spark_worker
  # #   environment:
  # #     - SPARK_MODE=worker
  # #     - SPARK_MASTER=spark://spark-master:7077
  # #     - SPARK_WORKER_MEMORY=2G
  # #     - SPARK_WORKER_CORES=2
  # #     - SPARK_WORKER_WEBUI_PORT=8081
  # #   depends_on:
  # #     - spark-master
  # #   ports:
  # #     - "8082:8081"
  # #   networks:
  # #     - fans_network
  # #   volumes:
  # #     - ./backend/recommendation:/app
  # #   command: /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
  # #   restart: unless-stopped

  # Redis (캐싱)
  redis:
    image: redis:7-alpine
    container_name: fans_redis
    ports:
      - "6379:6379"
    networks:
      - fans_network
    restart: unless-stopped

  # # Spark ML Classification API (Port: 5000) - 사용 안함 (simple-classifier로 대체)
  # # classification-api:
  # #   build: ./backend/recommendation
  # #   container_name: fans_classification_api
  # #   ports:
  # #     - "5000:5000"
  # #   environment:
  # #     - CLASSIFICATION_API_PORT=5000
  # #     - SPARK_MASTER=spark://spark-master:7077
  # #     - POSTGRES_DB=${POSTGRES_DB}
  # #     - POSTGRES_USER=${POSTGRES_USER}
  # #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  # #   depends_on:
  # #     - spark-master
  # #     - spark-worker
  # #     - postgres
  # #   networks:
  # #     - fans_network
  # #   volumes:
  # #     - ./backend/recommendation:/app
  # #     - classification_models:/app/models
  # #   restart: unless-stopped

  # # Airflow Postgres (메타데이터 저장) - 사용 안함
  # # airflow-postgres:
  # #   image: postgres:15
  # #   container_name: fans_airflow_postgres
  # #   environment:
  # #     POSTGRES_USER: airflow
  # #     POSTGRES_PASSWORD: airflow
  # #     POSTGRES_DB: airflow
  # #   volumes:
  # #     - airflow_postgres_data:/var/lib/postgresql/data
  # #   networks:
  # #     - fans_network
  # #   restart: unless-stopped

  # # Airflow Webserver (Port: 8081) - 사용 안함 (scheduler 서비스로 대체)
  # # airflow-webserver:
  # #   image: apache/airflow:2.8.0
  # #   container_name: fans_airflow_webserver
  # #   depends_on:
  # #     - airflow-postgres
  # #     - kafka
  # #     - spark-master
  # #   environment:
  # #     - AIRFLOW__CORE__EXECUTOR=LocalExecutor
  # #     - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
  # #     - AIRFLOW__CORE__FERNET_KEY=''
  # #     - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
  # #     - AIRFLOW__CORE__LOAD_EXAMPLES=false
  # #     - AIRFLOW__WEBSERVER__SECRET_KEY=airflow_secret_key
  # #     - _AIRFLOW_DB_MIGRATE=true
  # #     - _AIRFLOW_WWW_USER_CREATE=true
  # #     - _AIRFLOW_WWW_USER_USERNAME=admin
  # #     - _AIRFLOW_WWW_USER_PASSWORD=admin
  # #   ports:
  # #     - "8081:8080"
  # #   volumes:
  # #     - ./backend/airflow/dags:/opt/airflow/dags
  # #     - ./backend/airflow/logs:/opt/airflow/logs
  # #     - ./backend/recommendation:/opt/airflow/recommendation
  # #   networks:
  # #     - fans_network
  # #   command: >
  # #     bash -c "airflow db migrate &&
  # #              airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || true &&
  # #              airflow webserver"
  # #   restart: unless-stopped

  # # Airflow Scheduler - 사용 안함 (scheduler 서비스로 대체)
  # # airflow-scheduler:
  # #   image: apache/airflow:2.8.0
  # #   container_name: fans_airflow_scheduler
  # #   depends_on:
  # #     - airflow-postgres
  # #     - airflow-webserver
  # #   environment:
  # #     - AIRFLOW__CORE__EXECUTOR=LocalExecutor
  # #     - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
  # #     - AIRFLOW__CORE__FERNET_KEY=''
  # #     - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
  # #     - AIRFLOW__CORE__LOAD_EXAMPLES=false
  # #   volumes:
  # #     - ./backend/airflow/dags:/opt/airflow/dags
  # #     - ./backend/airflow/logs:/opt/airflow/logs
  # #     - ./backend/recommendation:/opt/airflow/recommendation
  # #   networks:
  # #     - fans_network
  # #   command: scheduler
  # #   restart: unless-stopped

volumes:
  postgres_data:
  # airflow_postgres_data:  # 사용 안함
  # classification_models:  # 사용 안함

networks:
  fans_network:
    driver: bridge