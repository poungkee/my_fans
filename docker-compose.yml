services:
  # ================================
  # 데이터베이스
  # ================================

  # PostgreSQL Database Server (Port: 5432)
  postgres:
    image: postgres:15
    container_name: fans_postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: fans_db
      POSTGRES_USER: fans_user
      POSTGRES_PASSWORD: fans_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fans_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fans_user -d fans_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ================================
  # AI 서비스들
  # ================================

  # AI Summarization Service (Port: 8000)
  summarize-ai:
    build: ./backend/ai/summarize-ai
    container_name: fans_summarize_ai
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - PORT=8000
    networks:
      - fans_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # ================================
  # 편향 분석 AI 서비스
  # ================================

  # AI Bias Analysis Service (Port: 8002)
  bias-analysis-ai:
    build: ./backend/ai/bias-analysis-ai
    container_name: fans_bias_analysis_ai
    ports:
      - "8002:8002"
    env_file:
      - .env
    environment:
      - PORT=8002
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fans_network
    volumes:
      - ./backend/ai/bias-analysis-ai:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # ================================
  # 크롤러 서비스들
  # ================================

  # RSS Crawler Service (Port: 4002)
  rss-crawler:
    build: ./backend/crawler/rss-crawler
    container_name: fans_rss_crawler
    ports:
      - "4002:4002"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fans_network
    volumes:
      - ./backend/crawler/rss-crawler/src:/app/src
      - ./backend/crawler/rss-crawler/package.json:/app/package.json
      - ./backend/crawler/rss-crawler/package-lock.json:/app/package-lock.json
      - ./backend/crawler/rss-crawler/tsconfig.json:/app/tsconfig.json
      - /app/node_modules
      - /app/dist
    restart: unless-stopped

  # API Crawler Service (Port: 4003)
  api-crawler:
    build: ./backend/crawler/api-crawler
    container_name: fans_api_crawler
    ports:
      - "4003:4003"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fans_network
    volumes:
      - ./backend/crawler/api-crawler/src:/app/src
      - ./backend/crawler/api-crawler/package.json:/app/package.json
      - ./backend/crawler/api-crawler/package-lock.json:/app/package-lock.json
      - ./backend/crawler/api-crawler/tsconfig.json:/app/tsconfig.json
      - /app/node_modules
      - /app/dist
    restart: unless-stopped

  # ================================
  # 메인 API 서비스
  # ================================

  # Main Backend API (Port: 3000)
  main-api:
    build: ./backend/api
    container_name: fans_main_api
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - PORT=3000
    depends_on:
      postgres:
        condition: service_healthy
      summarize-ai:
        condition: service_healthy
      rss-crawler:
        condition: service_started
      api-crawler:
        condition: service_started
    networks:
      - fans_network
    volumes:
      - ./backend/api:/app
      - /app/node_modules
      - ./backend/api/uploads:/app/uploads
    restart: unless-stopped

  # ================================
  # 프론트엔드
  # ================================

  # React Frontend (Port: 3001)
  frontend:
    build: ./frontend
    container_name: fans_frontend
    ports:
      - "3001:3001"
    environment:
      - REACT_APP_API_BASE=
      - REACT_APP_API_URL=http://main-api:3000
      - REACT_APP_AI_SERVICE_URL=http://summarize-ai:8000
      - PORT=3001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - fans_network
    depends_on:
      - main-api
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  fans_network:
    driver: bridge