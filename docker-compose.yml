services:
  # ================================
  # 데이터베이스
  # ================================

  # PostgreSQL Database Server (Port: 5432)
  postgres:
    image: postgres:15
    container_name: fans_postgres
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fans_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fans_user} -d ${POSTGRES_DB:-fans_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ================================
  # AI 서비스들
  # ================================

  # AI Summarization Service (Port: 8000)
  summarize-ai:
    build: ./backend/ai/summarize-ai
    container_name: fans_summarize_ai
    ports:
      - "${SUMMARIZE_AI_PORT:-8000}:8000"
    env_file:
      - .env
    environment:
      - PORT=${SUMMARIZE_AI_PORT:-8000}
      - MODEL_NAME=${MODEL_NAME}
      - MAX_SUMMARY_LENGTH=${MAX_SUMMARY_LENGTH}
    networks:
      - fans_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # ================================
  # 편향 분석 AI 서비스
  # ================================

  # AI Bias Analysis Service (Port: 8002)
  bias-analysis-ai:
    build: ./backend/ai/bias-analysis-ai
    container_name: fans_bias_analysis_ai
    ports:
      - "${BIAS_ANALYSIS_AI_PORT:-8002}:8002"
    env_file:
      - .env
    environment:
      - PORT=${BIAS_ANALYSIS_AI_PORT:-8002}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fans_network
    volumes:
      - ./backend/ai/bias-analysis-ai:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # ================================
  # 크롤러 서비스들
  # ================================

  # RSS Crawler Service (Port: 4002)
  rss-crawler:
    build:
      context: ./backend/crawler
      dockerfile: ./rss-crawler/Dockerfile
    container_name: fans_rss_crawler
    ports:
      - "${RSS_CRAWLER_PORT:-4002}:4002"
    env_file:
      - .env
    environment:
      - RSS_CRAWLER_PORT=${RSS_CRAWLER_PORT:-4002}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fans_network
    volumes:
      - ./backend/crawler/rss-crawler/src:/app/src
      - ./backend/crawler/rss-crawler/package.json:/app/package.json
      - ./backend/crawler/rss-crawler/package-lock.json:/app/package-lock.json
      - ./backend/crawler/rss-crawler/tsconfig.json:/app/tsconfig.json
      - /app/node_modules
      - /app/dist
    restart: unless-stopped

  # API Crawler Service (Port: 4003)
  api-crawler:
    build:
      context: ./backend/crawler
      dockerfile: ./api-crawler/Dockerfile
    container_name: fans_api_crawler
    ports:
      - "${API_CRAWLER_PORT:-4003}:4003"
    env_file:
      - .env
    environment:
      - API_CRAWLER_PORT=${API_CRAWLER_PORT:-4003}
      - AUTO_CRAWL=${AUTO_CRAWL:-true}
      - CRAWL_INTERVAL_MINUTES=${CRAWL_INTERVAL_MINUTES:-5}
      - CRAWL_LIMIT_PER_CATEGORY=${CRAWL_LIMIT_PER_CATEGORY:-5}
      - NAVER_SEARCH_CLIENT_ID=${NAVER_SEARCH_CLIENT_ID}
      - NAVER_SEARCH_CLIENT_SECRET=${NAVER_SEARCH_CLIENT_SECRET}
      - NAVER_CLIENT_ID_2=${NAVER_CLIENT_ID_2}
      - NAVER_CLIENT_SECRET_2=${NAVER_CLIENT_SECRET_2}
    depends_on:
      postgres:
        condition: service_healthy
      bias-analysis-ai:
        condition: service_healthy
    networks:
      - fans_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4003/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    # volumes:
    #   - ./backend/crawler/api-crawler/src:/app/src
    #   - ./backend/crawler/api-crawler/package.json:/app/package.json
    #   - ./backend/crawler/api-crawler/package-lock.json:/app/package-lock.json
    #   - ./backend/crawler/api-crawler/tsconfig.json:/app/tsconfig.json
    #   - /app/node_modules
    #   - /app/dist
    restart: unless-stopped

  # ================================
  # Puppeteer Crawler - 방법 1: 환경변수 기반 (완벽한 시간차 분산)
  # ================================

  puppeteer-crawler-1:
    build:
      context: ./backend/crawler
      dockerfile: ./puppeteer-crawler/Dockerfile
    container_name: fans_puppeteer_crawler_1
    ports:
      - "4004:4004"
    env_file:
      - .env
    environment:
      - PUPPETEER_CRAWLER_PORT=${PUPPETEER_CRAWLER_PORT:-4004}
      - AUTO_CRAWL=${AUTO_CRAWL:-true}
      - CRAWL_INTERVAL=${CRAWL_INTERVAL:-180000}
      - TOTAL_REPLICAS=${TOTAL_REPLICAS:-3}
      - REPLICA_INDEX=0
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fans_network
    shm_size: '2gb'
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped

  puppeteer-crawler-2:
    build:
      context: ./backend/crawler
      dockerfile: ./puppeteer-crawler/Dockerfile
    container_name: fans_puppeteer_crawler_2
    ports:
      - "4005:4004"
    env_file:
      - .env
    environment:
      - PUPPETEER_CRAWLER_PORT=${PUPPETEER_CRAWLER_PORT:-4004}
      - AUTO_CRAWL=${AUTO_CRAWL:-true}
      - CRAWL_INTERVAL=${CRAWL_INTERVAL:-180000}
      - TOTAL_REPLICAS=${TOTAL_REPLICAS:-3}
      - REPLICA_INDEX=1
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fans_network
    shm_size: '2gb'
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped

  puppeteer-crawler-3:
    build:
      context: ./backend/crawler
      dockerfile: ./puppeteer-crawler/Dockerfile
    container_name: fans_puppeteer_crawler_3
    ports:
      - "4006:4004"
    env_file:
      - .env
    environment:
      - PUPPETEER_CRAWLER_PORT=${PUPPETEER_CRAWLER_PORT:-4004}
      - AUTO_CRAWL=${AUTO_CRAWL:-true}
      - CRAWL_INTERVAL=${CRAWL_INTERVAL:-180000}
      - TOTAL_REPLICAS=${TOTAL_REPLICAS:-3}
      - REPLICA_INDEX=2
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fans_network
    shm_size: '2gb'
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped

  # ================================
  # Puppeteer Crawler - 방법 2: 랜덤 지연 (자동 확장)
  # 사용법: docker-compose up -d --scale puppeteer-crawler-random=N
  # ================================

  # puppeteer-crawler-random:
  #   build:
  #     context: ./backend/crawler
  #     dockerfile: ./puppeteer-crawler/Dockerfile
  #   ports:
  #     - "4004-4010:4004"
  #   env_file:
  #     - .env
  #   environment:
  #     - PUPPETEER_CRAWLER_PORT=4004
  #     - AUTO_CRAWL=true
  #     - CRAWL_INTERVAL=180000
  #     - TOTAL_REPLICAS=3
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - fans_network
  #   shm_size: '2gb'
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1.0'
  #         memory: 1G
  #       reservations:
  #         cpus: '0.5'
  #         memory: 512M
  #   restart: unless-stopped

  # ================================
  # 메인 API 서비스
  # ================================

  # Main Backend API (Port: 3000)
  main-api:
    build: ./backend/api
    container_name: fans_main_api
    ports:
      - "${PORT:-3000}:3000"
    env_file:
      - .env
    environment:
      - PORT=${PORT:-3000}
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      postgres:
        condition: service_healthy
      summarize-ai:
        condition: service_healthy
      rss-crawler:
        condition: service_started
      api-crawler:
        condition: service_started
    networks:
      - fans_network
    volumes:
      - ./backend/api:/app
      - /app/node_modules
      - ./backend/api/uploads:/app/uploads
    restart: unless-stopped

  # ================================
  # 프론트엔드
  # ================================

  # React Frontend (Port: 3001)
  frontend:
    build: ./frontend
    container_name: fans_frontend
    ports:
      - "3001:3001"
    env_file:
      - .env
    environment:
      - REACT_APP_API_BASE=${REACT_APP_API_BASE}
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_AI_SERVICE_URL=${REACT_APP_AI_SERVICE_URL}
      - PORT=3001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - fans_network
    depends_on:
      - main-api
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  fans_network:
    driver: bridge